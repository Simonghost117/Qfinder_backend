import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';

dotenv.config();

// Configuraci√≥n mejorada de Sequelize
const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    dialect: 'mysql',
    port: process.env.DB_PORT || 3306,
    logging: process.env.NODE_ENV === 'development' ? console.log : false,
    
    // Configuraci√≥n espec√≠fica para MySQL/MariaDB
    dialectOptions: {
      connectTimeout: 60000, // Aumenta timeout de conexi√≥n
      dateStrings: true,     // Evita conversi√≥n autom√°tica de fechas
      typeCast: true,        // Permite type casting
      supportBigNumbers: true,
      bigNumberStrings: true
    },
    
    // Configuraci√≥n de pool mejorada
    pool: {
      max: 10,               // Aumenta el m√°ximo de conexiones
      min: 2,                // Mantiene m√≠nimo de conexiones
      acquire: 60000,        // Aumenta tiempo de adquisici√≥n
      idle: 10000            // Tiempo de inactividad
    },
    
    // Configuraci√≥n global de modelos
    define: {
      timestamps: true,      // Habilita createdAt y updatedAt
      underscored: true,     // Usa snake_case en la base de datos
      paranoid: false,       // Deshabilita deletedAt por defecto
      freezeTableName: true  // Evita pluralizaci√≥n autom√°tica
    },
    
    // Zona horaria
    timezone: '-05:00'       // Ajusta seg√∫n tu ubicaci√≥n (ej. Am√©rica/Lima)
  }
);

// Funci√≥n mejorada para probar conexi√≥n
export const testConnection = async () => {
  try {
    await sequelize.authenticate();
    
    // Verificaci√≥n adicional de permisos
    await sequelize.query('SELECT 1');
    
    console.log('‚úÖ Conexi√≥n a la base de datos establecida correctamente');
    return true;
  } catch (error) {
    console.error('‚ùå Error al conectar a la base de datos:', error.message);
    
    // Detalles espec√≠ficos para diagn√≥stico
    if (error.original) {
      console.error('C√≥digo de error:', error.original.code);
      console.error('N√∫mero de error:', error.original.errno);
    }
    
    return false;
  }
};

// Funci√≥n para sincronizaci√≥n segura
export const safeSync = async () => {
  try {
    console.log('üîÉ Sincronizando modelos...');
    
    await sequelize.query('SET FOREIGN_KEY_CHECKS = 0');
    await sequelize.sync({
      alter: process.env.NODE_ENV === 'development',
      logging: console.log
    });
    await sequelize.query('SET FOREIGN_KEY_CHECKS = 1');
    
    console.log('‚úÖ Modelos sincronizados correctamente');
    return true;
  } catch (error) {
    console.error('‚ùå Error al sincronizar modelos:', error);
    return false;
  }
};

export default sequelize;